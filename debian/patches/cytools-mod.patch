Description: Added functionality to compute K_cup and perform random
 walks in the graph of triangulations.
Author: Andres Rios-Tascon <ar2285@cornell.edu>
Last-Update: 2021-04-26

--- a/lib-src/ComputeTriangs.cc
+++ b/lib-src/ComputeTriangs.cc
@@ -32,108 +32,240 @@
 
 #include "ComputeTriangs.hh"
 
-void __dfs(const size_type no,
-	   const size_type rank,
-	   PartialTriang&  current_partial_triang,
-	   size_type*      partial_count_ptr,
-	   size_type*      count_ptr,
-	   const bool      output_triangs) {
-  SimplicialComplex forbidden;
-  for (SimplicialComplex::const_iterator sciter 
-	 = current_partial_triang.admissibles().begin();
-       sciter != current_partial_triang.admissibles().end(); 
-       ++sciter) {
-    const Simplex new_simp(*sciter);
-    forbidden += new_simp;
-    PartialTriang next_partial_triang(PartialTriang(current_partial_triang, new_simp, forbidden));
-    // new partial triang:
-    ++(*partial_count_ptr);
-    if (next_partial_triang.freefacets().is_empty()) {
-      // complete triang:
-      // output the triangulation:
-      if (output_triangs) {
-	std::cout << next_partial_triang << std::endl;
+#include <RegularityCheck.hh>
+#include <cstdlib>
+#include <time.h>
+#include <vector>
+#include <algorithm>
+#include <ctype.h>
+#include <string>
+
+std::vector<int> readArray(std::istream& ist){
+  char c;
+  int i;
+  size_type elem;
+  std::vector<int> array;
+  ist >> std::ws >> c;
+  if (c == '(') {
+    while (ist >> std::ws >> c) {
+      if (isspace(c)) {
+        continue;
+      }
+      if (c == ')') {
+        break;
+      }
+      if (c == ',') {
+        continue;
+      }
+      if (isdigit(c) || c == '-'){
+        ist.putback(c);
+        ist >> elem;
+        i = elem;
+        array.push_back(i);
       }
-      ++(*count_ptr);
-      if (CommandlineOptions::verbose()) {
-	if (*count_ptr % 10 == 0) {
-	  std::cerr << *count_ptr << " triangulations so far." << std::endl;
-	}
+      else {
+        std::cerr << "Error reading array: Not an integer." << std::endl;
+        ist.clear(std::ios::failbit);
+        array.clear();
+        return array;
       }
     }
-    else if (next_partial_triang.admissibles().is_empty()) {
-      // dead end:
+  }
+  else {
+    std::cerr << "Error reading array: Missing ``(''." << std::endl;
+    ist.clear(std::ios::failbit);
+    array.clear();
+    return array;
+  }
+  ist.clear(std::ios::goodbit);
+  return array;
+}
+
+std::vector<std::vector<int> > read2faces(std::istream& ist){
+  char c;
+  std::vector<std::vector<int> > twofaces;
+  std::vector<int> tmp_twoface;
+
+  ist >> std::ws >> c;
+  if (c == '('){
+    while (ist >> std::ws >> c){
+      if (isspace(c)) {
+        continue;
+      }
+      if (c == ')') {
+        break;
+      }
+      if (c == ',') {
+        continue;
+      }
+      ist.putback(c);
+      tmp_twoface = readArray(ist);
+      if (tmp_twoface.size() > 0){
+        twofaces.push_back(tmp_twoface);
+        tmp_twoface.clear();
+      }
+      else {
+        std::cerr << "Error reading 2-faces" << std::endl;
+        twofaces.clear();
+        return twofaces;
+      }
     }
-    else {
-      // partial triang:
-      __dfs(no, rank, next_partial_triang, partial_count_ptr, count_ptr, output_triangs);
+  }
+  else{
+    std::cerr << "Error readin 2-faces: Missing ``(''." << std::endl;
+    return twofaces;
+  }
+  ist.clear(std::ios::goodbit);
+  return twofaces;
+}
+
+std::vector<int> gkz_vector(TriangNode tn, PointConfiguration pts){
+  std::vector<int> gkz(pts.no(), 0);
+  for (SimplicialComplex::iterator iter = tn.begin(); iter != tn.end(); iter++){
+    const basis_type& basis(*iter);
+    Matrix basis_matrix;
+    for (basis_type::iterator iter = basis.begin(); iter != basis.end(); iter++){
+      basis_matrix.augment(pts[*iter]);
+    }
+    Field simp_vol_gmp(0);
+    simp_vol_gmp += abs(det(basis_matrix));
+    int simp_vol = mpz_get_d(simp_vol_gmp.get_num().get_mpz_t());
+    for(IntegerSet::iterator iter2 = iter->begin(); iter2 != iter->end(); iter2++){
+      gkz[*iter2] += simp_vol;
     }
   }
+  return gkz;
+}
+
+int gcd(int a, int b) {
+  if (b == 0)
+    return std::abs(a);
+  return gcd(b, a % b);
+}
+
+void minimize_ray(std::vector<int> *vec){
+  int g = 0;
+  for(int i = 0; i < vec->size(); i++){
+    g = gcd(g,(*vec)[i]);
+  }
+  for(int i = 0; i < vec->size(); i++){
+    (*vec)[i] /= g;
+  }
+}
+
+std::vector<int> gkz_diff(TriangNode tn1, TriangNode tn2, PointConfiguration pts){
+  std::vector<int> gkz1 = gkz_vector(tn1, pts);
+  std::vector<int> gkz2 = gkz_vector(tn2, pts);
+  std::vector<int> diff(pts.no(), 0);
+  for(int i = 0; i < diff.size(); i++){
+    diff[i] = gkz1[i] - gkz2[i];
+  }
+  minimize_ray(&diff);
+  return diff;
 }
 
+void __dfs(const size_type no,
+  const size_type rank,
+  PartialTriang&  current_partial_triang,
+  size_type*      partial_count_ptr,
+  size_type*      count_ptr,
+  const bool      output_triangs) {
+    SimplicialComplex forbidden;
+    for (SimplicialComplex::const_iterator sciter
+      = current_partial_triang.admissibles().begin();
+      sciter != current_partial_triang.admissibles().end();
+      ++sciter) {
+        const Simplex new_simp(*sciter);
+        forbidden += new_simp;
+        PartialTriang next_partial_triang(PartialTriang(current_partial_triang, new_simp, forbidden));
+        // new partial triang:
+        ++(*partial_count_ptr);
+        if (next_partial_triang.freefacets().is_empty()) {
+          // complete triang:
+          // output the triangulation:
+          if (output_triangs) {
+            std::cout << next_partial_triang << std::endl;
+          }
+          ++(*count_ptr);
+          if (CommandlineOptions::verbose()) {
+            if (*count_ptr % 10 == 0) {
+              std::cerr << *count_ptr << " triangulations so far." << std::endl;
+            }
+          }
+        }
+        else if (next_partial_triang.admissibles().is_empty()) {
+          // dead end:
+        }
+        else {
+          // partial triang:
+          __dfs(no, rank, next_partial_triang, partial_count_ptr, count_ptr, output_triangs);
+        }
+      }
+    }
+
 const size_type __no_of_all_triangs(const size_type       no,
-				    const size_type       rank, 
-				    const Admissibles&    admtable, 
-				    const InteriorFacets& intfacets,
-				    const bool            output_triangs) {
-  PartialTriang root(no, rank, admtable, intfacets);
-  if (CommandlineOptions::debug()) {
-    std::cerr << "Root triangulation: " << root << std::endl;
-    std::cerr << "Admissibles Table:  " << admtable << std::endl;
-    std::cerr << "InteriorFacets:     " << intfacets << std::endl;
-  }
-  size_type count(0);
-  size_type partial_count(0);
-  size_type no_of_simplices(root.admissibles().card());
-  size_type count_start_simplices(0);
-  SimplicialComplex forbidden;
-  for (SimplicialComplex::const_iterator sciter = root.admissibles().begin();
-       sciter != root.admissibles().end();
-       ++sciter) {
-    const Simplex start_simp(*sciter);
-    forbidden += start_simp;
-    PartialTriang next_partial_triang(root, start_simp, forbidden);
-    if (next_partial_triang.freefacets().is_empty()) {
-      // complete triang:
-      // output the triangulation:
-      if (output_triangs) {
-	std::cout << next_partial_triang << std::endl;
+  const size_type       rank,
+  const Admissibles&    admtable,
+  const InteriorFacets& intfacets,
+  const bool            output_triangs) {
+    PartialTriang root(no, rank, admtable, intfacets);
+    if (CommandlineOptions::debug()) {
+      std::cerr << "Root triangulation: " << root << std::endl;
+      std::cerr << "Admissibles Table:  " << admtable << std::endl;
+      std::cerr << "InteriorFacets:     " << intfacets << std::endl;
+    }
+    size_type count(0);
+    size_type partial_count(0);
+    size_type no_of_simplices(root.admissibles().card());
+    size_type count_start_simplices(0);
+    SimplicialComplex forbidden;
+    for (SimplicialComplex::const_iterator sciter = root.admissibles().begin();
+    sciter != root.admissibles().end();
+    ++sciter) {
+      const Simplex start_simp(*sciter);
+      forbidden += start_simp;
+      PartialTriang next_partial_triang(root, start_simp, forbidden);
+      if (next_partial_triang.freefacets().is_empty()) {
+        // complete triang:
+        // output the triangulation:
+        if (output_triangs) {
+          std::cout << next_partial_triang << std::endl;
+        }
+        ++count;
+        if (CommandlineOptions::verbose() && (count % 10 == 0)) {
+          std::cerr << count << " triangulations so far." << std::endl;
+        }
       }
-      ++count;
-      if (CommandlineOptions::verbose() && (count % 10 == 0)) {
-	std::cerr << count << " triangulations so far." << std::endl;
+      __dfs(no, rank, next_partial_triang, &partial_count, &count, output_triangs);
+      if (CommandlineOptions::verbose()) {
+        std::cerr << "done " << ++count_start_simplices
+        << " start simplices out of " << no_of_simplices
+        << '.' << std::endl;
       }
     }
-    __dfs(no, rank, next_partial_triang, &partial_count, &count, output_triangs);
     if (CommandlineOptions::verbose()) {
-      std::cerr << "done " << ++count_start_simplices 
-	   << " start simplices out of " << no_of_simplices 
-	   << '.' << std::endl;
+      std::cerr << partial_count << " partial triangulations visited in total." << std::endl;
     }
-  }
-  if (CommandlineOptions::verbose()) {
-    std::cerr << partial_count << " partial triangulations visited in total." << std::endl;
-  }
-  return count;
+    return count;
 }
 
 const size_type __no_of_triangs(const parameter_type      no,
-				const parameter_type      rank,
-				const PointConfiguration& points,
- 				const Chirotope&          chiro,
-				const SymmetryGroup&      symmetries,
-				const SimplicialComplex&  seed,
-				const SymmetryGroup&      seed_symmetries,
-				const bool                output_triangs,
-				const bool                fine_only) {
-  SymmetricBFS bfs(no, rank, points, chiro, 
-		   symmetries, seed, seed_symmetries, 
-		   output_triangs, fine_only);
-  if (CommandlineOptions::verbose()) {
-    std::cerr << bfs.symcount() << " symmetry classes." << std::endl;
-    std::cerr << bfs.totalcount() << " triangulations in total." << std::endl;
-  }
-  return bfs.symcount();
+  const parameter_type      rank,
+  const PointConfiguration& points,
+  const Chirotope&          chiro,
+  const SymmetryGroup&      symmetries,
+  const SimplicialComplex&  seed,
+  const SymmetryGroup&      seed_symmetries,
+  const bool                output_triangs,
+  const bool                fine_only) {
+    SymmetricBFS bfs(no, rank, points, chiro,
+      symmetries, seed, seed_symmetries,
+      output_triangs, fine_only);
+      if (CommandlineOptions::verbose()) {
+        std::cerr << bfs.symcount() << " symmetry classes." << std::endl;
+        std::cerr << bfs.totalcount() << " triangulations in total." << std::endl;
+      }
+      return bfs.symcount();
 }
 
 int ComputeTriangs::run(const int flags) {
@@ -145,6 +277,8 @@
   const bool preprocess     = flags & PREPROCESS;
   const bool findflips      = flags & FINDFLIPS;
   const bool unimodular     = flags & UNIMODULAR;
+  const bool random_walk    = flags & RANDOM_WALK;
+  const bool compute_kcup   = flags & COMPUTE_KCUP;
 
   if (CommandlineOptions::verbose()) {
     std::cerr << std::endl;
@@ -165,45 +299,45 @@
     Chirotope chiro;
     if (input_chiro) {
       if (chiro.read_string(std::cin)) {
-	if (CommandlineOptions::verbose()) {
-	  std::cerr << "read chirotope." << std::endl;
-	}
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "read chirotope." << std::endl;
+        }
       }
       else {
-	if (CommandlineOptions::verbose()) {
-	  std::cerr << "error while reading chirotope." << std::endl;
-	}
-	return 1;
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "error while reading chirotope." << std::endl;
+        }
+        return 1;
       }
-    }  
+    }
     else {
       if (!points.read(std::cin)) {
-	if (CommandlineOptions::verbose()) {
-	  std::cerr << "error while reading point configuration." << std::endl;
-	}
-	return 1;
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "error while reading point configuration." << std::endl;
+        }
+        return 1;
       }
       if ((points.no() < 2) || (points.rank() < 2)) {
-	if (CommandlineOptions::verbose()) {
-	  std::cerr << "no of points and rank must be at least two." << std::endl;
-	}
-	return 1;
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "no of points and rank must be at least two." << std::endl;
+        }
+        return 1;
       }
       if (points.rank() > points.no()) {
-	if (CommandlineOptions::verbose()) {
-	  std::cerr << "rank must not be larger than no of points." << std::endl;
-	}
-	return 1;
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "rank must not be larger than no of points." << std::endl;
+        }
+        return 1;
       }
       chiro = Chirotope(points, preprocess);
-      }
-//     if (CommandlineOptions::verbose()) {
-//       std::cerr << "computing dual chirotope ..." << std::endl;
-//     }
-//     Chirotope* dualptr = new Chirotope(chiro.dual());
-//     if (CommandlineOptions::verbose()) {
-//       std::cerr << "... done." << std::endl;
-//     }
+    }
+    //     if (CommandlineOptions::verbose()) {
+    //       std::cerr << "computing dual chirotope ..." << std::endl;
+    //     }
+    //     Chirotope* dualptr = new Chirotope(chiro.dual());
+    //     if (CommandlineOptions::verbose()) {
+    //       std::cerr << "... done." << std::endl;
+    //     }
     size_type no(chiro.no());
     size_type rank(chiro.rank());
     if (CommandlineOptions::verbose()) {
@@ -226,7 +360,7 @@
     if (CommandlineOptions::verbose()) {
       std::cerr << "... done." << std::endl;
     }
-//     delete dualptr;
+    //     delete dualptr;
     if (CommandlineOptions::verbose()) {
       std::cerr << "computing facets ..." << std::endl;
     }
@@ -261,37 +395,37 @@
     PointConfiguration points;
     if (input_chiro) {
       // polymake input:
-//       if (CommandlineOptions::polymakeobj()) {
-// 	CommandlineOptions::polymakeobj().read("CHIROTOPE", 0);
-// 	chiro.read_string(CommandlineOptions:polymakeobj());
-//       }
-//       else {
-	if (!chiro.read_string(std::cin)) {
-	  if (CommandlineOptions::verbose()) {
-	    std::cerr << "error while reading chirotope." << std::endl;
-	  }
-	  return 1;
-	}
-//       }
+      //       if (CommandlineOptions::polymakeobj()) {
+      // 	CommandlineOptions::polymakeobj().read("CHIROTOPE", 0);
+      // 	chiro.read_string(CommandlineOptions:polymakeobj());
+      //       }
+      //       else {
+      if (!chiro.read_string(std::cin)) {
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "error while reading chirotope." << std::endl;
+        }
+        return 1;
+      }
+      //       }
     }
     else {
       if (!points.read(std::cin)) {
-	if (CommandlineOptions::verbose()) {
-	  std::cerr << "error while reading point configuration." << std::endl;
-	}
-	return 1;
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "error while reading point configuration." << std::endl;
+        }
+        return 1;
       }
       if ((points.no() < 2) || (points.rank() < 2)) {
-	if (CommandlineOptions::verbose()) {
-	  std::cerr << "no of points and rank must be at least two." << std::endl;
-	}
-	return 1;
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "no of points and rank must be at least two." << std::endl;
+        }
+        return 1;
       }
       if (points.rank() > points.no()) {
-	if (CommandlineOptions::verbose()) {
-	  std::cerr << "rank must not be larger than no of points." << std::endl;
-	}
-	return 1;
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "rank must not be larger than no of points." << std::endl;
+        }
+        return 1;
       }
       chiro = Chirotope(points, preprocess);
     }
@@ -300,112 +434,374 @@
     SymmetryGroup symmetries(no);
     if (!CommandlineOptions::ignore_symmetries()) {
       if (symmetries.read(std::cin)) {
-	if (CommandlineOptions::verbose()) {
-#ifndef STL_SYMMETRIES
-	  std::cerr << symmetries.load() << " symmetries in total." << std::endl;
-#else
-	  std::cerr << symmetries.size() << " symmetries in total." << std::endl;
-#endif
-	  if (CommandlineOptions::debug()) {
-	    std::cerr << "symmetries:" << std::endl;
-	    std::cerr << symmetries << std::endl;
-	  }
-	}
+        if (CommandlineOptions::verbose()) {
+          #ifndef STL_SYMMETRIES
+          std::cerr << symmetries.load() << " symmetries in total." << std::endl;
+          #else
+          std::cerr << symmetries.size() << " symmetries in total." << std::endl;
+          #endif
+          if (CommandlineOptions::debug()) {
+            std::cerr << "symmetries:" << std::endl;
+            std::cerr << symmetries << std::endl;
+          }
+        }
       }
     }
     else {
       if (CommandlineOptions::verbose()) {
-	std::cerr << "no valid symmetry generators found." << std::endl;
+        std::cerr << "no valid symmetry generators found." << std::endl;
       }
     }
     SimplicialComplex seed;
     if (!seed.read(std::cin)) {
       if (CommandlineOptions::verbose()) {
-	std::cerr << "no valid seed triangulation found" << std::endl;
-	std::cerr << "computing seed triangulation via placing and pushing ..." 
-	     << std::endl;
+        std::cerr << "no valid seed triangulation found" << std::endl;
+        std::cerr << "computing seed triangulation via placing and pushing ..."
+        << std::endl;
       }
       if (fine_only) {
-	seed = FineTriang(chiro);
+        seed = FineTriang(chiro);
       }
       else {
-	seed = PlacingTriang(chiro);
+        seed = PlacingTriang(chiro);
       }
     }
     if (CommandlineOptions::verbose()) {
       std::cerr << "Computing symmetries of seed ..." << std::endl;
     }
-    const SymmetryGroup seed_symmetries(symmetries, seed);
+    SymmetryGroup seed_symmetries(symmetries, seed);
     if (CommandlineOptions::verbose()) {
       std::cerr << "... done." << std::endl;
-#ifndef STL_SYMMETRIES
+      #ifndef STL_SYMMETRIES
       std::cerr << seed_symmetries.load() << " symmetries in total in seed." << std::endl;
-#else
+      #else
       std::cerr << seed_symmetries.size() << " symmetries in total in seed." << std::endl;
-#endif
+      #endif
       if (CommandlineOptions::debug()) {
-	std::cerr << "symmetries:" << std::endl;
-	std::cerr << symmetries << std::endl;
+        std::cerr << "symmetries:" << std::endl;
+        std::cerr << symmetries << std::endl;
       }
     }
     if (CommandlineOptions::check()) {
       if (CommandlineOptions::verbose()) {
-	std::cerr << "checking seed triangulation ..." << std::endl;
+        std::cerr << "checking seed triangulation ..." << std::endl;
       }
       if (!(CheckTriang(seed, seed_symmetries, chiro, symmetries, fine_only))()) {
-	if (CommandlineOptions::verbose()) {
-	  std::cerr << "seed triangulation " << std::endl
-	       << seed << std::endl
-	       << "not valid." << std::endl;
-	}
-	return(1);
+        if (CommandlineOptions::verbose()) {
+          std::cerr << "seed triangulation " << std::endl
+          << seed << std::endl
+          << "not valid." << std::endl;
+        }
+        return(1);
       }
       if (CommandlineOptions::verbose()) {
-	std::cerr << "... done." << std::endl;;
+        std::cerr << "... done." << std::endl;;
       }
     }
     if (CommandlineOptions::verbose()) {
       std::cerr << "seed: " << seed << std::endl;
       std::cerr << "containing " << seed.card() << " simplices" << std::endl;
-      std::cerr << "using the following " << seed.support().card() << " vertices: " 
-		<< seed.support() << std::endl;
+      std::cerr << "using the following " << seed.support().card() << " vertices: "
+      << seed.support() << std::endl;
       std::cerr << "... done." << std::endl;
     }
     if (findflips) {
       if (CommandlineOptions::verbose()) {
-	std::cerr << "count all flips of seed ..." << std::endl;
+        std::cerr << "count all flips of seed ..." << std::endl;
       }
       const TriangNode tn(0, no, rank, seed);
       const TriangFlips tf(chiro, tn, seed_symmetries, fine_only);
       if (CommandlineOptions::verbose()) {
-// 	std::cerr << tf.flips().load() << " flips in total." << std::endl;
-	std::cerr << tf.flips().size() << " flips in total." << std::endl;
-	std::cerr << "... done." << std::endl;
+        // 	std::cerr << tf.flips().load() << " flips in total." << std::endl;
+        std::cerr << tf.flips().size() << " flips in total." << std::endl;
+        std::cerr << "... done." << std::endl;
       }
       if (output_triangs) {
-	std::cout << tf << std::endl;
+        std::cout << tf << std::endl;
       }
       else {
-// 	std::cout << tf.flips().load() << std::endl;
-	std::cout << tf.flips().size() << std::endl;
+        // 	std::cout << tf.flips().load() << std::endl;
+        std::cout << tf.flips().size() << std::endl;
       }
       return 0;
     }
-    if (CommandlineOptions::verbose()) {
-      std::cerr << "count all symmetry classes of triangulations ..." << std::endl;
+    if(random_walk){
+      srand(time(0));
+      bool only_star = false;
+      bool only_regular = false;
+      int N = 1; // Number of steps to take
+      std::vector<int> nvec = readArray(std::cin);
+      if(nvec.size() == 1){
+        N = std::abs(nvec[0]);
+        only_regular = nvec[0] > 0;
+      }
+      else std::cerr << "Failed to read number of steps. Will only perform one." << std::endl;
+      int star_pt = -1;
+      std::vector<int> pt_count(points.coldim(), 0);
+      int n_simp = 0;
+      for(SimplicialComplex::iterator it = seed.begin(); it != seed.end(); it++){
+        for(IntegerSet::iterator it2 = it->begin(); it2 != it->end(); it2++){
+          pt_count[*it2]++;
+        }
+        n_simp++;
+      }
+      star_pt = std::distance(pt_count.begin(),std::find(pt_count.begin(),pt_count.end(),n_simp));
+      if(star_pt == pt_count.size()){
+        std::cerr << "Seed triangulation is not star. Ignoring star condition..." << std::endl;
+        only_star = false;
+      }
+      TriangNode tn(0, no, rank, seed);
+      std::vector<Flip> flipChoices;
+      for(int s = 0; s < N; s++){
+        TriangFlips tf(chiro, tn, seed_symmetries, fine_only);
+        MarkedFlips mf = tf.flips();
+        for(MarkedFlips::iterator it = mf.begin(); it != mf.end(); it++){
+          Flip fl = Flip(tn,it->key());
+          if(only_star){
+            bool is_star = true;
+            SimplicialComplex s2 = fl.second;
+            if(!is_star) continue;
+            for(SimplicialComplex::iterator it = s2.begin(); it != s2.end(); it++){
+              if(!it->contains(star_pt)){
+                is_star = false;
+                break;
+              }
+            }
+            if(!is_star) continue;
+          }
+          if(only_regular && !RegularityCheck(points,chiro,(SimplicialComplex) TriangNode(0,tn,fl)).is_regular()){
+            continue;
+          }
+          flipChoices.push_back(fl);
+        }
+        if(s != N-1){
+          tn = TriangNode(0,tn,flipChoices[rand() % flipChoices.size()]);
+          flipChoices.clear();
+          seed_symmetries = SymmetryGroup(symmetries, (SimplicialComplex) tn);
+        }
+      }
+      // Print neighbors of triang from last step
+      for(std::vector<Flip>::iterator fl = flipChoices.begin(); fl != flipChoices.end(); fl++){
+        SimplicialComplex s = (SimplicialComplex) TriangNode(0,tn,*fl);
+        std::cout << "[";
+        for(SimplicialComplex::iterator it = s.begin(); it != s.end(); it++){
+          std::cout << (it == s.begin() ? "" : ",") << "[";
+          for(IntegerSet::iterator it2 = it->begin(); it2 != it->end(); it2++){
+            std::cout << (it2 == it->begin() ? "" : ",") << *it2;
+          }
+          std::cout << "]";
+        }
+        std::cout << "]" << std::endl;
+      }
+      return 0;
+    }
+    if(compute_kcup){
+      const bool verbose = false;
+      // These flags should be on, but you can turn them off for testing
+      const bool require_star = true;
+      const bool require_regular = true;
+      const bool require_fine = true;
+      const bool check_2faces = true;
+      // Read 2-faces
+      std::vector<std::vector<int> > twofaces = read2faces(std::cin);
+      // Check if seed triang is a star
+      int star_pt = -1;
+      if(require_star){
+        std::vector<int> pt_count(points.coldim(), 0);
+        int n_simp = 0;
+        for(SimplicialComplex::iterator it = seed.begin(); it != seed.end(); it++){
+          for(IntegerSet::iterator it2 = it->begin(); it2 != it->end(); it2++){
+            pt_count[*it2]++;
+          }
+          n_simp++;
+        }
+        star_pt = std::distance(pt_count.begin(),std::find(pt_count.begin(),pt_count.end(),n_simp));
+        if(star_pt == pt_count.size()){
+          std::cerr << "Seed triangulation is not star. Exiting..." << std::endl;
+          return 1;
+        }
+      }
+      // Check if seed triang is fine
+      if(require_fine){
+        std::vector<int> pts;
+        for(SimplicialComplex::iterator it = seed.begin(); it != seed.end(); it++){
+          for(IntegerSet::iterator it2 = it->begin(); it2 != it->end(); it2++){
+            if(std::find(pts.begin(),pts.end(),*it2) == pts.end()){
+              pts.push_back(*it2);
+            }
+          }
+        }
+        if(pts.size() != points.coldim()){
+          std::cerr << "Seed triangulation is not fine. Exiting..." << std::endl;
+          return 1;
+        }
+      }
+      // Create triang node from seed
+      TriangNode tn(0, no, rank, seed);
+      // Check if seed triang is regular
+      if(require_regular){
+        if(!RegularityCheck(points,chiro,(SimplicialComplex) tn).is_regular()){
+          std::cerr << "Seed triangulation is not regular. Exiting..." << std::endl;
+        }
+      }
+      // Vectors used to store everything
+      std::vector<TriangNode> same_cy, diff_cy, nonstar, nonfine, queue;
+      std::vector<Flip> to_diff_cy, to_nonstar, to_nonfine;
+      std::vector<std::vector<int> > mori_rays;
+      same_cy.push_back(tn);
+      queue.push_back(tn);
+      // Loop over all triangs giving the same CY
+      while(!queue.empty()){
+        if(verbose) std::cerr << "Same CY: " << same_cy.size() << " Different CY: " << diff_cy.size() << " Non-star: " << nonstar.size() << " Non-fine: " << nonfine.size() << " Rays: " << mori_rays.size() << " Queue: " << queue.size() << std::endl;
+        tn = queue[0];
+        TriangFlips tf(chiro, tn, seed_symmetries, false);
+        MarkedFlips mf = tf.flips();
+        for(MarkedFlips::iterator it = mf.begin(); it != mf.end(); it++){
+          Flip fl = Flip(tn,it->key());
+          TriangNode tmp_tn = TriangNode(0,tn,fl);
+          // Check if the triangulation was already visited
+          // TODO: It would be more efficient to store a hash so that looking up in memory is faster
+          if(std::find(same_cy.begin(),same_cy.end(),tmp_tn) != same_cy.end() ||
+          std::find(diff_cy.begin(),diff_cy.end(),tmp_tn) != diff_cy.end() ||
+          std::find(nonstar.begin(),nonstar.end(),tmp_tn) != nonstar.end() ||
+          std::find(nonfine.begin(),nonfine.end(),tmp_tn) != nonfine.end()) continue;
+          // Check if new triangulation is regular
+          if(require_regular && !RegularityCheck(points,chiro,(SimplicialComplex) tmp_tn).is_regular()) continue;
+          // Check if triangulation is star
+          bool is_star = true;
+          SimplicialComplex s1 = fl.first, s2 = fl.second;
+          for(SimplicialComplex::iterator it = s2.begin(); it != s2.end(); it++){
+            if(!it->contains(star_pt)){
+              is_star = false;
+              break;
+            }
+          }
+          if(require_star && !is_star){
+            nonstar.push_back(tmp_tn);
+            to_nonstar.push_back(fl);
+            std::vector<int> ray = gkz_diff(tmp_tn, tn, points);
+            if(std::find(mori_rays.begin(),mori_rays.end(),ray) == mori_rays.end()){
+              mori_rays.push_back(ray);
+            }
+            continue;
+          }
+          // Check if triangulation is fine
+          std::vector<int> pts1, pts2;
+          for(SimplicialComplex::iterator it = s1.begin(); it != s1.end(); it++){
+            for(IntegerSet::iterator it2 = it->begin(); it2 != it->end(); it2++){
+              if(std::find(pts1.begin(),pts1.end(),*it2) == pts1.end()){
+                pts1.push_back(*it2);
+              }
+            }
+          }
+          for(SimplicialComplex::iterator it = s2.begin(); it != s2.end(); it++){
+            for(IntegerSet::iterator it2 = it->begin(); it2 != it->end(); it2++){
+              if(std::find(pts2.begin(),pts2.end(),*it2) == pts2.end()){
+                pts2.push_back(*it2);
+              }
+            }
+          }
+          bool is_fine = pts1.size() == pts2.size();
+          if(require_fine && !is_fine){
+            nonfine.push_back(tmp_tn);
+            to_nonfine.push_back(fl);
+            std::vector<int> ray = gkz_diff(tmp_tn, tn, points);
+            if(std::find(mori_rays.begin(),mori_rays.end(),ray) == mori_rays.end()){
+              mori_rays.push_back(ray);
+            }
+            continue;
+          }
+          // Check if triangulation gives the same CY (triang of 2-faces is unchanged)
+          bool changes_2d = false;
+          std::vector<std::vector<std::vector<int> > > triang_2d_1, triang_2d_2;
+          for(std::vector<std::vector<int> >::iterator f = twofaces.begin(); f != twofaces.end(); f++){
+            std::vector<std::vector<int> > tmp_facetriang1, tmp_facetriang2;
+            for(SimplicialComplex::iterator it = s1.begin(); it != s1.end(); it++){
+              std::vector<int> simp;
+              for(IntegerSet::iterator it2 = it->begin(); it2 != it->end(); it2++){
+                if(std::find(f->begin(),f->end(),*it2) != f->end()){
+                  simp.push_back(*it2);
+                }
+              }
+              if(simp.size() == 3){
+                std::sort(simp.begin(),simp.end());
+                if(std::find(tmp_facetriang1.begin(),tmp_facetriang1.end(),simp) == tmp_facetriang1.end()){
+                  tmp_facetriang1.push_back(simp);
+                }
+              }
+            }
+            std::sort(tmp_facetriang1.begin(), tmp_facetriang1.end());
+            triang_2d_1.push_back(tmp_facetriang1);
+            for(SimplicialComplex::iterator it = s2.begin(); it != s2.end(); it++){
+              std::vector<int> simp;
+              for(IntegerSet::iterator it2 = it->begin(); it2 != it->end(); it2++){
+                if(std::find(f->begin(),f->end(),*it2) != f->end()){
+                  simp.push_back(*it2);
+                }
+              }
+              if(simp.size() == 3){
+                std::sort(simp.begin(),simp.end());
+                if(std::find(tmp_facetriang2.begin(),tmp_facetriang2.end(),simp) == tmp_facetriang2.end()){
+                  tmp_facetriang2.push_back(simp);
+                }
+              }
+            }
+            std::sort(tmp_facetriang2.begin(), tmp_facetriang2.end());
+            triang_2d_2.push_back(tmp_facetriang2);
+          }
+          changes_2d = (triang_2d_1 != triang_2d_2);
+          if(check_2faces && changes_2d){
+            diff_cy.push_back(tmp_tn);
+            to_diff_cy.push_back(fl);
+            std::vector<int> ray = gkz_diff(tmp_tn, tn, points);
+            if(std::find(mori_rays.begin(),mori_rays.end(),ray) == mori_rays.end()){
+              mori_rays.push_back(ray);
+            }
+            continue;
+          }
+          // If triangulation is an FRST giving the same CY then add it to the list
+          if(std::find(same_cy.begin(),same_cy.end(),tmp_tn) == same_cy.end()){
+            same_cy.push_back(tmp_tn);
+            queue.push_back(tmp_tn);
+            // test
+            std::vector<int> ray = gkz_diff(tmp_tn, tn, points);
+            if(false && std::find(mori_rays.begin(),mori_rays.end(),ray) == mori_rays.end()){
+              mori_rays.push_back(ray);
+            }
+          }
+        }
+        queue.erase(queue.begin());
+      }
+      if(verbose){
+        std::cerr << "########## Done ##########" << std::endl;
+        std::cerr << "Same CY: " << same_cy.size() << " Different CY: " << diff_cy.size() << " Non-star: " << nonstar.size() << " Non-fine: " << nonfine.size() << " Rays: " << mori_rays.size() << std::endl;
+      }
+      // Print Mori cone rays
+      for(std::vector<std::vector<int> >::iterator it = mori_rays.begin(); it != mori_rays.end(); it++){
+        std::cout << "[";
+        for(std::vector<int>::iterator it2 = it->begin(); it2 != it->end(); it2++){
+          std::cout << (it2==it->begin() ? "" : ",") << *it2;
+        }
+        std::cout << "]\n";
+      }
+
+      return 0;
     }
-    const size_type N = __no_of_triangs(no, rank, points, chiro, 
-					symmetries, seed, seed_symmetries,
-					output_triangs, fine_only);
     if (CommandlineOptions::verbose()) {
-      std::cerr << N << " symmetry classes of triangulations in total." << std::endl;
-      std::cerr << "... done." << std::endl;
+      std::cerr << "count all symmetry classes of triangulations ..." << std::endl;
     }
-    if (!output_triangs) {
-      std::cout << N << std::endl;
+    const size_type N = __no_of_triangs(no, rank, points, chiro,
+      symmetries, seed, seed_symmetries,
+      output_triangs, fine_only);
+      if (CommandlineOptions::verbose()) {
+        std::cerr << N << " symmetry classes of triangulations in total." << std::endl;
+        std::cerr << "... done." << std::endl;
+      }
+      if (!output_triangs) {
+        std::cout << N << std::endl;
+      }
+      return 0;
     }
-    return 0;
-  }
 }
 
 // eof ComputeTriangs.cc

--- a/lib-src/ComputeTriangs.hh
+++ b/lib-src/ComputeTriangs.hh
@@ -13,6 +13,8 @@
 #define PREPROCESS     0x0010
 #define FINDFLIPS      0x0020
 #define UNIMODULAR     0x0040
+#define RANDOM_WALK    0x0080
+#define COMPUTE_KCUP   0x0100

 class ComputeTriangs {
 public:

--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -17,6 +17,7 @@
 topcom-chiro2placingtriang \
 topcom-chiro2triangs \
 topcom-cocircuits2facets \
+topcom-computekcup \
 topcom-cross \
 topcom-cube \
 topcom-cyclic \
@@ -37,6 +38,7 @@
 topcom-points2placingtriang \
 topcom-points2triangs \
 topcom-points2volume \
+topcom-randomwalk \
 topcom-santos_triang \
 topcom-santos_dim4_triang \
 topcom-santos_22_triang
@@ -59,6 +61,7 @@
 topcom_chiro2placingtriang_SOURCES        = chiro2placingtriang.cc
 topcom_chiro2triangs_SOURCES              = chiro2triangs.cc
 topcom_cocircuits2facets_SOURCES          = cocircuits2facets.cc
+topcom_computekcup_SOURCES                = computekcup.cc
 topcom_cross_SOURCES                      = cross.cc
 topcom_cube_SOURCES                       = cube.cc
 topcom_cyclic_SOURCES                     = cyclic.cc
@@ -79,6 +82,7 @@
 topcom_points2placingtriang_SOURCES       = points2placingtriang.cc
 topcom_points2triangs_SOURCES             = points2triangs.cc
 topcom_points2volume_SOURCES              = points2volume.cc
+topcom_randomwalk_SOURCES                 = randomwalk.cc
 topcom_santos_triang_SOURCES              = santos_triang.cc
 topcom_santos_dim4_triang_SOURCES         = santos_dim4_triang.cc
 topcom_santos_22_triang_SOURCES           = santos_22_triang.cc

--- a/src/computekcup.cc
+++ b/src/computekcup.cc
@@ -0,0 +1,7 @@
+#include "CommandlineOptions.hh"
+#include "ComputeTriangs.hh"
+
+int main(const int argc, const char** argv) {
+  CommandlineOptions::init(argc, argv);
+  return (ComputeTriangs::run(COMPUTE_KCUP | OUTPUT_TRIANGS));
+}

--- a/src/randomwalk.cc
+++ b/src/randomwalk.cc
@@ -0,0 +1,7 @@
+#include "CommandlineOptions.hh"
+#include "ComputeTriangs.hh"
+
+int main(const int argc, const char** argv) {
+  CommandlineOptions::init(argc, argv);
+  return (ComputeTriangs::run(RANDOM_WALK | OUTPUT_TRIANGS));
+}

--- a/README
+++ b/README
@@ -0,0 +1,42 @@
+==========================================================================
+  TOPCOM: Triangulations of Point Configurations and Oriented Matroids
+               Version 0.9.1 by Jörg Rambau - 10 Jul 2002
+==========================================================================
+
+Copyright (C) 1999--2002 Jörg Rambau (rambau@zib.de)
+
+This program is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; if not, write to the Free Software
+Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA  02110-1335  USA
+
+See the file INSTALL for generic installation instructions.
+
+
+IMPORTANT:
+
+(1) You need at least gcc3.0 to build this package.
+
+(2) TOPCOM as of version 0.11.0 or higher uses gmp verson 4.1.  If you don't have
+gmp version 4.1 or higher a copy of gmp-4.1 is included.  See the file INSTALL
+for instructions how to build and install gmp-4.1 locally.
+
+(3) On some installations of Linux the linker flag `-static' must be added in
+src/Makefile.am.  Otherwise one might get undefined references from the stdc++
+library.  Unfortunately, some systems do not allow the `-static' flag.  Since it
+mostly works without this flag, the default is not to have it set.
+
+Further references: For details concerning the Santos triangulation see
+Francisco Santos' paper
+
+	``A Point Set whose Space of Triangulations is Disconnected''
+	Journal of the American Mathematical Society.
